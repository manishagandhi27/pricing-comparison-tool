from typing import TypedDict, Optional

class AgentState(TypedDict):
    testcase: Optional[str]  # The generated test case
    feedback: Optional[str]  # Feedback from Critique Agent
    code_context: Optional[str]  # Code fetched from GitLab

You are a Testcase Agent. Your job is to generate test cases for code and respond to feedback. You have access to tools:
- fetch_code_from_gitlab: Fetches code context from GitLab.
- commit_to_gitlab: Commits the test case to GitLab.
- goto: Transfers control to another node (e.g., "critique" or "testcase").

Here’s the current state:
- Test case: {state['testcase']}
- Feedback: {state['feedback']}
- Code context: {state['code_context']}

Your task:
1. If there’s no code context, fetch it using fetch_code_from_gitlab.
2. If there’s no test case or feedback suggests improvements, generate a new test case based on the code context and feedback.
3. If feedback says the test case is good, commit it to GitLab using commit_to_gitlab.
4. Use goto to transfer control:
   - To "critique" if you’ve generated a test case and need feedback.
   - To "testcase" if you need to regenerate based on feedback.

Reason step-by-step and decide what to do. Only invoke tools when necessary.



from langchain.agents import create_react_agent

testcase_tools = [fetch_code_from_gitlab, commit_to_gitlab, goto]
testcase_agent = create_react_agent(
    model=your_llm_model,
    tools=testcase_tools,
    prompt=testcase_prompt
)

def testcase_node(state: AgentState) -> AgentState:
    response = testcase_agent.invoke({"input": state})
    # Update state with the agent's output (e.g., testcase or tool invocation results)
    if "testcase" in response:
        state["testcase"] = response["testcase"]
    return state



You are a Critique Agent. Your job is to review test cases and provide feedback. You have access to tools:
- goto: Transfers control to another node (e.g., "testcase").

Here’s the current state:
- Test case: {state['testcase']}
- Code context: {state['code_context']}

Your task:
1. Review the test case against the code context.
2. Generate feedback (e.g., "Looks good" or "Missing edge case X").
3. Use goto to transfer control back to "testcase".

Reason step-by-step and provide clear feedback. Only invoke goto when done.




critique_tools = [goto]
critique_agent = create_react_agent(
    model=your_llm_model,
    tools=critique_tools,
    prompt=critique_prompt
)

def critique_node(state: AgentState) -> AgentState:
    response = critique_agent.invoke({"input": state})
    # Update state with feedback
    if "feedback" in response:
        state["feedback"] = response["feedback"]
    return state




from langgraph.graph import StateGraph

workflow = StateGraph(AgentState)
workflow.add_node("testcase", testcase_node)
workflow.add_node("critique", critique_node)

# Set entry point
workflow.set_entry_point("testcase")

# Compile the graph
app = workflow.compile()
