import os
import subprocess
import coverage
import pytest
import datetime

def test_agent(test_file_path, feature_id="FEAT-123"):
    """
    Test Agent: Executes tests from the given test file path and generates a report with coverage.

    Args:
        test_file_path (str): Path to the test file (e.g., 'tests/test_lld.py').
        feature_id (str): Feature ID for naming the report (default: 'FEAT-123').

    Returns:
        str: Path to the generated test report file.

    Raises:
        FileNotFoundError: If the test file doesn’t exist.
        ValueError: If not run from the correct directory.
    """
    # Constants
    ROOT_DIR = "test-agents"
    REPORT_DIR = os.path.join(ROOT_DIR, "reports")
    IMPLEMENTATION_DIR = "upload_doc.lld"  # Package containing lld.py

    # Validate execution context
    if not os.getcwd().endswith(ROOT_DIR):
        raise ValueError(f"Please run this agent from the {ROOT_DIR}/ directory")

    # Validate test file exists
    if not os.path.exists(test_file_path):
        raise FileNotFoundError(f"Test file not found: {test_file_path}")

    # Create reports directory if it doesn’t exist
    os.makedirs(REPORT_DIR, exist_ok=True)
    report_file = os.path.join(REPORT_DIR, f"test_report_{feature_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

    # Step 1: Run tests with pytest and capture output
    try:
        test_result = subprocess.run(
            ["pytest", test_file_path, "-v", "--tb=short"],  # Verbose output, short traceback
            capture_output=True,
            text=True,
            check=False
        )
        test_output = test_result.stdout + test_result.stderr
        passed = "FAILED" not in test_output.upper()
        passed_count = test_output.count("PASSED")
        failed_count = test_output.count("FAILED")
        error_count = test_output.count("ERROR")
    except Exception as e:
        test_output = f"Test execution failed: {str(e)}"
        passed = False
        passed_count, failed_count, error_count = 0, 1, 0

    # Step 2: Measure code coverage
    try:
        # Initialize coverage, targeting the upload_doc package
        cov = coverage.Coverage(source=[IMPLEMENTATION_DIR])
        cov.start()

        # Run tests again for coverage (silent output)
        subprocess.run(
            ["pytest", test_file_path, "--no-cov"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        cov.stop()
        cov.save()

        # Generate coverage report
        coverage_percent = cov.report(show_missing_lines=True)
        cov_report_file = os.path.join(REPORT_DIR, f"coverage_{feature_id}.txt")
        with open(cov_report_file, "w") as f:
            cov.report(file=f)  # Detailed report to a file
        cov.html_report(directory=os.path.join(REPORT_DIR, "coverage_html"))  # Optional HTML report
    except Exception as e:
        coverage_percent = 0.0
        cov_report_file = None
        cov_error = f"Coverage measurement failed: {str(e)}"
    else:
        cov_error = None

    # Step 3: Generate test report
    with open(report_file, "w") as f:
        f.write(f"Test Report for {feature_id}\n")
        f.write("=" * 50 + "\n")
        f.write(f"Generated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")

        # Test Results Section
        f.write("Test Results\n")
        f.write("-" * 20 + "\n")
        f.write(f"Overall Status: {'PASSED' if passed else 'FAILED'}\n")
        f.write(f"Tests Passed: {passed_count}\n")
        f.write(f"Tests Failed: {failed_count}\n")
        f.write(f"Test Errors: {error_count}\n")
        f.write("Details:\n")
        f.write(test_output)
        f.write("\n")

        # Coverage Section
        f.write("Coverage Report\n")
        f.write("-" * 20 + "\n")
        if cov_error:
            f.write(f"Error: {cov_error}\n")
        else:
            f.write(f"Coverage: {coverage_percent:.2f}%\n")
            f.write(f"Covered Files: {IMPLEMENTATION_DIR}/lld.py\n")
            f.write(f"Detailed Report: {cov_report_file}\n")
            f.write(f"HTML Report: {REPORT_DIR}/coverage_html/index.html\n")

    # Step 4: Simulate GitLab commit
    commit_message = f"Add test report for {feature_id} with coverage - {passed_count} passed, {failed_count} failed"
    print(f"Generated report: {report_file}")
    print(f"Commit message: {commit_message}")

    return report_file

def main():
    """Example usage of the Test Agent."""
    test_file_path = "tests/test_lld.py"
    feature_id = "FEAT-123"
    try:
        report_path = test_agent(test_file_path, feature_id)
        print(f"Test report generated successfully at: {report_path}")
    except Exception as e:
        print(f"Test Agent failed: {str(e)}")

if __name__ == "__main__":
    main()
