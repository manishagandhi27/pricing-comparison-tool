def preprocess_metadata(meta):
    """Ensure all nested values are ES-friendly."""
    if not isinstance(meta, dict):
        return {"value": str(meta) if meta else ""}
    result = {}
    for key, value in meta.items():
        if isinstance(value, dict):
            result[key] = preprocess_metadata(value)
        else:
            # Convert problematic types to strings
            result[key] = str(value) if value is not None else ""
    return result

# Save chunks with preprocessing
for i, chunk in enumerate(chunks):
    meta = preprocess_metadata(chunk.metadata)
    print(f"Chunk {i} metadata: {meta}")
    
    doc = {
        "content": chunk.page_content,
        "dense_embedding": embeddings.embed_query(chunk.page_content).tolist(),
        "metadata": meta,
        "tags": ["AI", "tech"],
        "file_description": "AI trends report",
        "file_name": "unknown.pdf"
    }
    print(f"Doc to index: {doc}")
    
    try:
        es.index(index=index_name, id=i, body=doc)
        print(f"Chunk {i} indexed!")
    except Exception as e:
        print(f"Error indexing chunk {i}: {str(e)}")
        print(f"Problematic doc: {doc}")
        break
